#!/bin/bash

NAME=abaqus
upper_NAME=`echo ${NAME} | tr '[a-z]' '[A-Z]'`
EXE_NAME=${NAME}
VERSION=6.14.2
SUBMIT_JOB=1
EXTRA_MODULE_NAME1=
EXTRA_MODULE_NAME2=
MODULE_NAME=${upper_NAME}/${VERSION}
GCC_MODULE_NAME=GCC/4.7.4
COMPILER_MODULE_NAME=iccifort/2011.13.367
#DSLS_FACTOR=10
DSLS_FACTOR=1

source /hpc-common/software/sub_scripts/common_sub_fns.sh
#source /home/garvct/my_sw_development/pbs_job_submit/common_sub_fns.sh

#LIC_COURTEOUS=1
# Set Abaqus default to interactive mode
EXE_ARGS="int"


function usage ()
{
     echo
     echo "sub_abaqus_$VERSION"
     echo      "usage: sub_abaqus_$VERSION <-J Job_Name> <-w HH:MM:SS> <-P project> [<-i Input_file>] [<-j Job_Name>] [<-n no_mpi_procs>] "
     echo      "                       [<-q queue>] [<-N mpi_procs_per_node>]  [<-p output_precision>]"
     echo      "                       [<-u user>] [<-W depends_on_jobid>] [<-m memory_per_process>] [<-c NUM_COURTEOUS_TOKENS >] [<-F job_array_filename>] [<-R job_array_range>] [<-s scratch,ramdisk,localdisk>] [<-t cpu_type>] [<-D>] [<-g>] [<-h>]"
     echo
     echo      "Submits an Abaqus $VERSION job to HPC cluster via SLURM."
     echo
     echo      " Where:"
     echo      " -J Job_Name   : Selects the Abaqus Job Name.( Default: none)"
     echo      " -w HH:MM:SS   : Selects the Job Walltime.( Default: none)"
     echo      " -P project    : Selects the project this job is associated with.( Default: none)"
     echo      " -i Input_file : Selects the Name of Input file.( Default: Use Job Name)"
     echo      " -j Job_Name   : Selects the Job Name.( Default: Job_Name)"
     echo      " -n mpiprocs   : Selects the number of MPI processes to use.( Default: 1)"
     echo      " -q queue      : Selects the Job queue to use.( Default: general)"
     echo      " -N mpi_per_node : Selects the maximum number of mpi processes to use in each node.( Default: $CORES_PER_NODE)"
     echo      " -p output_precision : Selects the output precision (options: single | full). (Default: single)"
     echo      " -u user       : Specify source file or object file. (Default: none)"
     echo      " -W depend_on_jobid : This job runs after jobid is complete. (Default: none)"
     echo      " -m memory_per_process : Set the Memory per process(Default: Slurm default)"
     echo      " -D            : Selects the debug option (performance basic system checks, tracks memory usage, process placement etc)( Default: off)"
     echo      " -c NUM_TOKENS : Number of courteous Abaqus tokens reserved for other users (Default: 9 (36 for job array))"
     echo      " -F job_array_filename : Selects the job array Filename. Each line of the file contains"
     echo      "                             the full path to the input file. (Default: None)"
     echo      " -R job_array_range : Selects the job array range (e.g 1-10)( Default: None)"
     echo      " -s scratch,ramdisk,localdisk : Job runs in scratch(panasas parallel filesystem),"
     echo      "                                ramdisk(memory where available) or localdisk (locally attached disk where available). (Default: Run from current location)"
     echo      " -t cpu_type   : Applicable on falcon cluster only, requests the cpu type (\"haswell\" requests haswell processors, \"broadwell\" requests broadwell processors (default "haswell")"
     echo      " -g            : Generate Job script only, but do not submit (Default: Generate and submit)"
     echo      " -h            : help"
     echo
     echo "Note : If you need to set extra/specific abaqus arguments, use the ABQ_EXTRA_ARGS environmental variable."
     echo "       e.g export ABQ_EXTRA_ARGS=\"scratch=/tmp\""
     echo "       To add extra SLURM options (e.g --mail-type=BEGIN,END --mail-user=garvct), use the environmental variable SLURM_EXTRA_ARGS"
     echo        'e.g. export SLURM_EXTRA_ARGS="--mail-type=BEGIN,END --mail-user=garvct"'
     echo
 
}

function calc_no_lic_tokens {
   c_n_l_tokens="define calc_lic_token (a,b) { return 5 * e(b * l(a)); }"
   no_tokens=`echo "$c_n_l_tokens;calc_lic_token($1,0.422)" | bc -l`
   ABQ_LIC=$((${no_tokens%.*} * $DSLS_FACTOR))
#   if [ $LIC_COURTEOUS -eq 1 ]
#   then
   ABQ_LIC=`expr $ABQ_LIC + $NUM_COURTEOUS_TOKENS`
#   fi
}


function mod_input_str {

if [[ $INPUT =~ .*\.inp ]]
then
   INPUTINP=$INPUT
else
   INPUTINP=$INPUT".inp"
fi
}

while getopts "J:w:P:i:j:n:q:N:p:u:W:m:c:F:R:s:t:DghX" opt; do
  case $opt in
    J)
      JOB=$OPTARG
      ;;
    i)
      INPUT=$OPTARG
      ;;
    j)
      JOBNAME=$OPTARG
      ;;
    w)
      WALLTIME=$OPTARG
      ;;
    P)
      PROJECT=$OPTARG
      ;;
    n)
      MPIPROCS=$OPTARG
      ;;
    q)
      QUEUE=$OPTARG
      ;;
    N)
      MPI_PER_NODE=$OPTARG
      MPI_PER_NODE_SET=$OPTARG
      ;;
    p)
      OUTPUT_PRECISION=$OPTARG
      ABQ_ARGS=$ABQ_ARGS" output_precision=$OUTPUT_PRECISION"
      ;;
    u)
      USER=$OPTARG
      ABQ_ARGS=$ABQ_ARGS" user=$USER"
      ;;
    W)
      DEPENDS_ON_JOBID=$OPTARG
      ;;
    m)
      MEM_PER_PROCESS=$OPTARG
      ;;
    D)
      DEBUG_JOB=1
      ;;
    c)
      NUM_COURTEOUS_TOKENS=$OPTARG
#      LIC_COURTEOUS=0
      ;;
    R)
      JOB_ARRAY_RANGE=$OPTARG
      ;;
    F)
      JOB_ARRAY_FILENAME=$OPTARG
      ;;
    s)
      SCRATCH_TYPE=$OPTARG
      ;;
    t)
      CPU_TYPE=$OPTARG
      ;;
    g)
      SUBMIT_JOB=0
      ;;
    h)
      HELP=1
      usage
      exit 0
      ;;
    X)
      exit 0
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit
      ;;
  esac
done

slurm_check_command_args

mod_input_str
INPUT_BASE=${INPUTINP%%.inp}
INPUT_ORIG=$INPUT
INPUT=$INPUT_BASE

slurm_set_default_jobname

if [ -n "$JOB_ARRAY_RANGE" ]
then
   NUM_COURTEOUS_TOKENS=${NUM_COURTEOUS_TOKENS:-$((36*$DSLS_FACTOR))}
else
   NUM_COURTEOUS_TOKENS=${NUM_COURTEOUS_TOKENS:-$((9*$DSLS_FACTOR))}
fi

#calc_chunk_new
calc_no_lic_tokens $MPIPROCS

if [ -n "$SCRATCH_TYPE" ]
then
   get_scratch_dir $SCRATCH_TYPE
fi


echo  "#!/bin/bash"                                                                                          > $JOBNAME.sbatch

slurm_tasks $JOBNAME.sbatch
slurm_set_defaults $JOBNAME.sbatch
slurm_depends_on $JOBNAME.sbatch
slurm_jobarray $JOBNAME.sbatch

#echo  "#PBS -l abq_lic=$ABQ_LIC"                                                                            >> $JOBNAME.sbatch
echo  "#"                                                                                                   >> $JOBNAME.sbatch
echo  "echo \$SLURM_JOB_NODELIST"                                                                           >> $JOBNAME.sbatch
echo  "#"                                                                                                   >> $JOBNAME.sbatch

load_modules $JOBNAME.sbatch

echo  "#"                                                                                                   >> $JOBNAME.sbatch
echo  "echo"                                                                                                >> $JOBNAME.sbatch
echo  "echo \"The following SLURM extra args (SLURM_EXTRA_ARGS) will be used: $SLURM_EXTRA_ARGS\""          >> $JOBNAME.sbatch
echo  "echo \"The following Abaqus extra args (ABQ_EXTRA_ARGS) will be used: $ABQ_EXTRA_ARGS\""             >> $JOBNAME.sbatch
echo  "#"                                                                                                   >> $JOBNAME.sbatch

slurm_create_nodefile $JOBNAME.sbatch
slurm_debug_job $JOBNAME.sbatch

echo  "#"                                                                                                   >> $JOBNAME.sbatch

slurm_setup_run_in_scratch $JOBNAME.sbatch $INPUTINP

echo  "#"                                                                                                   >> $JOBNAME.sbatch

slurm_setup_jobarray $JOBNAME.sbatch

if [ $MPIPROCS -gt 1 ]
then
   EXE_ARGS=$EXE_ARGS" cpus=$MPIPROCS mp_mode=mpi"
fi
if [ -n "$JOB_ARRAY_RANGE" ]
then
   if [ -z $JOB ]
   then
      EXE_ARGS=$EXE_ARGS" job=\$input_name"
   else
      EXE_ARGS=$EXE_ARGS" job=$JOB"
   fi
   EXE_ARGS=$EXE_ARGS" input=\$input_name"
else
   JOB=${JOB:-$INPUT_ORIG}
   EXE_ARGS=$EXE_ARGS" job=$JOB"
   EXE_ARGS=$EXE_ARGS" input=$INPUT_ORIG"
fi

echo  "#"                                                                                                   >> $JOBNAME.sbatch
if [ -z "$DEBUG_JOB" ]
then
   echo "time ${EXE_NAME} ${EXE_ARGS} ${ABQ_EXTRA_ARGS}"                                                    >> $JOBNAME.sbatch
else
   echo "job_tracker.py \"${EXE_NAME} ${EXE_ARGS} ${ABQ_EXTRA_ARGS}\""                                      >> $JOBNAME.sbatch
fi
echo  "#"                                                                                                   >> $JOBNAME.sbatch

INPUT=$INPUTINP
slurm_finish_jobarray_and_scratch $JOBNAME.sbatch

if [ $SUBMIT_JOB -eq 1 ]
then
   sbatch $SLURM_EXTRA_ARGS $JOBNAME.sbatch
fi
